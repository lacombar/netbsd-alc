.\"	$NetBSD: varargs.3,v 1.6 2003/08/07 10:31:01 agc Exp $
.\"
.\" Copyright (c) 1990, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	From:
.\"	 (#)stdarg.3	8.1 (Berkeley) 6/5/93
.\"	 NetBSD: stdarg.3,v 1.11 2002/02/04 18:27:38 kleink Exp
.\"
.Dd February 4, 2002
.Dt VARARGS 3
.Os
.Sh NAME
.Nm varargs
.Nd variable argument lists
.Sh SYNOPSIS
.In varargs.h
.Ft void
.Fn va_start "va_list ap"
.Ft type
.Fn va_arg "va_list ap" type
.Ft void
.Fn va_end "va_list ap"
.Sh DESCRIPTION
.Bf -symbolic
These historic interfaces are provided to support compilation of
existing programs only.
New code should use the
.Xr stdarg 3
interfaces.
.Ef
.Pp
A function may be called with a varying number of arguments of varying
types.
The include file
.Aq Pa varargs.h
declares a type
.Pq Em va_list
and defines three macros for stepping
through a list of arguments whose number and types are not known to
the called function.
.Pp
The called function must name an argument
.Fa va_alist ,
which marks the start of the variable argument list,
and which is naturally the last argument named.
It is declared by
.Fa va_dcl ,
which should not be followed by a semicolon.
The called function also must declare an object of type
.Em va_list
which is used by the macros
.Fn va_start ,
.Fn va_arg ,
and
.Fn va_end .
.Pp
The
.Fn va_start
macro initializes
.Fa ap
for subsequent use by
.Fn va_arg
and
.Fn va_end ,
and must be called first.
.Pp
It is possible for
.Fa va_alist
to be the only parameter to a function, resulting in it being possible
for a function to have no fixed arguments preceding the variable
argument list.
.Pp
The
.Fn va_start
macro returns no value.
.Pp
The
.Fn va_arg
macro expands to an expression that has the type and value of the next
argument in the call.
The parameter
.Fa ap
is the
.Em va_list Fa ap
initialized by
.Fn va_start .
Each call to
.Fn va_arg
modifies
.Fa ap
so that the next call returns the next argument.
The parameter
.Fa type
is a type name specified so that the type of a pointer to an
object that has the specified type can be obtained simply by
adding a *
to
.Fa type .
.Pp
If there is no next argument, or if
.Fa type
is not compatible with the type of the actual next argument
(as promoted according to the default argument promotions),
random errors will occur.
.Pp
The first use of the
.Fn va_arg
macro after that of the
.Fn va_start
macro returns the argument after
.Fa last .
Successive invocations return the values of the remaining
arguments.
.Pp
The
.Fn va_end
macro handles a normal return from the function whose variable argument
list was initialized by
.Fn va_start .
.Pp
The
.Fn va_end
macro returns no value.
.Sh EXAMPLES
The function
.Em foo
takes a string of format characters and prints out the argument
associated with each format character based on the type.
.Bd -literal -offset indent
void foo(fmt, va_alist)
	char *fmt;
	va_dcl
{
	va_list ap;
	int d;
	char c, *p, *s;

	va_start(ap);
	while (*fmt) {
		switch (*fmt++) {
		case 's':			/* string */
			s = va_arg(ap, char *);
			printf("string %s\en", s);
			break;
		case 'd':			/* int */
			d = va_arg(ap, int);
			printf("int %d\en", d);
			break;
		case 'c':			/* char */
			c = va_arg(ap, char);
			printf("char %c\en", c);
			break;
		}
	}
	va_end(ap);
}
.Ed
.Sh SEE ALSO
.Xr stdarg 3
.Sh STANDARDS
These historic macros were replaced in
.St -ansiC
by the include file
.Aq Pa stdarg.h ;
see
.Xr stdarg 3
for its description.
.Sh COMPATIBILITY
These macros are
.Em not
compatible with the new macros they were replaced by.
In particular, it is not possible for a
.Em stdarg
function to have no fixed arguments.
